{
  "name": "httpreq",
  "description": "node-httpreq is a node.js library to do HTTP(S) requests the easy way",
  "version": "0.3.9",
  "author": {
    "name": "Sam Decrock",
    "url": "https://github.com/SamDecrock/"
  },
  "bugs": {
    "url": "https://github.com/SamDecrock/node-httpreq/issues"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SamDecrock/node-httpreq.git"
  },
  "main": "./httpreq",
  "contributors": [
    {
      "name": "Russell Beattie",
      "url": "https://github.com/russellbeattie"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "node-httpreq\n============\n\nnode-httpreq is a node.js library to do HTTP(S) requests the easy way\n\nDo GET, POST, upload files, use cookies, change headers, ...\n\n## Install\n\nYou can install __httpreq__ using the Node Package Manager (npm):\n\n    npm install httpreq\n\n## Simple example\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.get('http://www.google.com', function (err, res){\n    if (err) return console.log(err);\n\n    console.log(res.statusCode);\n    console.log(res.headers);\n    console.log(res.body);\n    console.log(res.cookies);\n});\n```\n\n## How to use\n\n* [httpreq.get(url, [options], callback)](#get)\n* [httpreq.post(url, [options], callback)](#post)\n* [httpreq.uploadFiles(options, callback)](#upload)\n* [Downloading a binary file](#binary)\n* [Downloading a file directly to disk](#download)\n* [Sending a custom body](#custombody)\n* [Using a http(s) proxy](#proxy)\n* [httpreq.doRequest(options, callback)](#dorequest)\n\n---------------------------------------\n<a name=\"get\" />\n### httpreq.get(url, [options], callback)\n\n__Arguments__\n - url: The url to connect to. Can be http or https.\n - options: (all are optional) The following options can be passed:\n    - parameters: an object of query parameters\n    - headers: an object of headers\n    - cookies: an array of cookies\n    - binary: true/false (default: false), if true, res.body will a buffer containing the binary data\n    - json: if you want to send json directly (content-type is set to *application/json* )\n    - body: custom body content you want to send. Json is ignored when this is used.\n    - allowRedirects: (default: __true__ , only with httpreq.get() ), if true, redirects will be followed\n    - maxRedirects: (default: __10__ ). For example 1 redirect will allow for one normal request and 1 extra redirected request.\n    - timeout: (default: __none__ ). Adds a timeout to the http(s) request. Should be in milliseconds.\n    - proxy, if you want to pass your request through a http(s) proxy server:\n        - host: eg: \"192.168.0.1\"\n        - port: eg: 8888\n        - protocol: (default: __'http'__ ) can be 'http' or 'https'\n - callback(err, res): A callback function which is called when the request is complete. __res__ contains the headers ( __res.headers__ ), the http status code ( __res.statusCode__ ) and the body ( __res.body__ )\n\n__Example without options__\n\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.get('http://www.google.com', function (err, res){\n\tif (err) return console.log(err);\n\n    console.log(res.statusCode);\n    console.log(res.headers);\n\tconsole.log(res.body);\n});\n```\n\n__Example with options__\n\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.get('http://posttestserver.com/post.php', {\n\tparameters: {\n\t\tname: 'John',\n\t\tlastname: 'Doe'\n\t},\n\theaders:{\n\t\t'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:18.0) Gecko/20100101 Firefox/18.0'\n\t},\n\tcookies: [\n\t\t'token=DGcGUmplWQSjfqEvmu%2BZA%2Fc',\n\t\t'id=2'\n\t]\n}, function (err, res){\n\tif (err){\n\t\tconsole.log(err);\n\t}else{\n\t\tconsole.log(res.body);\n\t}\n});\n```\n---------------------------------------\n<a name=\"post\" />\n### httpreq.post(url, [options], callback)\n\n__Arguments__\n - url: The url to connect to. Can be http or https.\n - options: (all are optional) The following options can be passed:\n    - parameters: an object of post parameters ( *application/x-www-form-urlencoded* is used)\n    - headers: an object of headers\n    - cookies: an array of cookies\n    - binary: true/false (default: __false__ ), if true, res.body will be a buffer containing the binary data\n    - json: if you want to send json directly (content-type is set to *application/json* )\n    - body: custom body content you want to send. Parameters or json is ignored when this is used.\n    - allowRedirects: (default: __false__ ), if true, redirects will be followed\n    - maxRedirects: (default: __10__ ). For example 1 redirect will allow for one normal request and 1 extra redirected request.\n    - timeout: (default: none). Adds a timeout to the http(s) request. Should be in milliseconds.\n    - proxy, if you want to pass your request through a http(s) proxy server:\n        - host: eg: \"192.168.0.1\"\n        - port: eg: 8888\n        - protocol: (default: __'http'__ ) can be 'http' or 'https'\n - callback(err, res): A callback function which is called when the request is complete. __res__ contains the headers ( __res.headers__ ), the http status code ( __res.statusCode__ ) and the body ( __res.body__ )\n\n__Example without extra options__\n\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.post('http://posttestserver.com/post.php', {\n\tparameters: {\n\t\tname: 'John',\n\t\tlastname: 'Doe'\n\t}\n}, function (err, res){\n\tif (err){\n\t\tconsole.log(err);\n\t}else{\n\t\tconsole.log(res.body);\n\t}\n});\n```\n\n__Example with options__\n\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.post('http://posttestserver.com/post.php', {\n\tparameters: {\n\t\tname: 'John',\n\t\tlastname: 'Doe'\n\t},\n\theaders:{\n\t\t'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:18.0) Gecko/20100101 Firefox/18.0'\n\t},\n\tcookies: [\n\t\t'token=DGcGUmplWQSjfqEvmu%2BZA%2Fc',\n\t\t'id=2'\n\t]\n}, function (err, res){\n\tif (err){\n\t\tconsole.log(err);\n\t}else{\n\t\tconsole.log(res.body);\n\t}\n});\n```\n---------------------------------------\n<a name=\"upload\" />\n### httpreq.uploadFiles(options, callback)\n\n__Arguments__\n - options: The following options can be passed:\n    - url: the url to post the files to\n    - parameters: an object of post parameters ( *multipart/form-data* is used)\n    - files: an object of files (can be more than one)\n    - headers: an object of headers\n    - cookies: an array of cookies\n    - binary: true/false (default: __false__ ), if true, res.body will be a buffer containing the binary data\n - callback(err, res): A callback function which is called when the request is complete. __res__ contains the headers ( __res.headers__ ), the http status code ( __res.statusCode__ ) and the body ( __res.body__ )\n\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.uploadFiles({\n\turl: \"http://rekognition.com/demo/do_upload/\",\n\tparameters:{\n\t\tname_space\t: 'something',\n\t},\n\tfiles:{\n\t\tfileToUpload: __dirname + \"/exampleupload.jpg\"\n\t}},\nfunction (err, res){\n\tif (err){\n\t\tconsole.log(err);\n\t}else{\n\t\tconsole.log(res.body);\n\t}\n});\n```\n\n---------------------------------------\n<a name=\"binary\" />\n### Downloading a binary file\nTo download a binary file, just add __binary: true__ to the options when doing a get or a post.\n\n__Example__\n\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.get('https://ssl.gstatic.com/gb/images/k1_a31af7ac.png', {binary: true}, function (err, res){\n    if (err){\n        console.log(err);\n    }else{\n        fs.writeFile(__dirname + '/test.png', res.body, function (err) {\n            if(err)\n                console.log(\"error writing file\");\n        });\n    }\n});\n```\n\n---------------------------------------\n<a name=\"download\" />\n### Downloading a file directly to disk\nTo download a file directly to disk, use the download methode provided.\n\n__Example__\n\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.download(\n    'https://ssl.gstatic.com/gb/images/k1_a31af7ac.png',\n    __dirname + '/test.png'\n, function (err, progress){\n    if (err) return console.log(err);\n    console.log(progress);\n}, function (err, res){\n    if (err) return console.log(err);\n    console.log(res);\n});\n\n```\n---------------------------------------\n<a name=\"custombody\" />\n### Sending a custom body\nUse the body option to send a custom body (eg. an xml post)\n\n__Example__\n\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.post('http://posttestserver.com/post.php',{\n    body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n    headers:{\n        'Content-Type': 'text/xml',\n    }},\n    function (err, res) {\n        if (err){\n            console.log(err);\n        }else{\n            console.log(res.body);\n        }\n    }\n);\n```\n\n---------------------------------------\n<a name=\"proxy\" />\n### Using a http(s) proxy\n\n__Example__\n\n```js\nvar httpreq = require('httpreq');\n\nhttpreq.post('http://posttestserver.com/post.php', {\n    proxy: {\n        host: '10.100.0.126',\n        port: 8888\n    }\n}, function (err, res){\n    if (err){\n        console.log(err);\n    }else{\n        console.log(res.body);\n    }\n});\n```\n\n---------------------------------------\n<a name=\"dorequest\" />\n### httpreq.doRequest(options, callback)\n\nhttpreq.doRequest is internally used by httpreq.get() and httpreq.post(). You can use this directly. Everything is stays the same as httpreq.get() or httpreq.post() except that the following options MUST be passed:\n- url: the url to post the files to\n- method: 'GET' or 'POST'\n\n\n",
  "readmeFilename": "README.md",
  "_id": "httpreq@0.3.9",
  "dist": {
    "shasum": "50a846ce2f1e80a2c389ed914fa27a2fd795f42e"
  },
  "_from": "httpreq@*",
  "_resolved": "https://registry.npmjs.org/httpreq/-/httpreq-0.3.9.tgz"
}
